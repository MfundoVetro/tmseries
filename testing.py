import streamlit as st
import pandas as pd
import numpy as np
import streamlit as st
import streamlit_authenticator as stauth
from prophet import Prophet
from statsmodels.tsa.arima.model import ARIMA

# Set the page title and icon
st.set_page_config(page_title="Time Series Forecasting", page_icon=":bar_chart:")

#Load our DataFrames

School_Of_Commerce = 'CAC.csv'
Business_School = 'Commerce.csv'
Professional_Accounting = 'MBS.csv'

# Define the authentication credentials
names = ['Mfundo Mhlanga','Dean Vetro']
usernames = ['Mfundo_Mhlanga','Dean']
passwords = ['Vetro_M','Vetro_D']

# Define the authentication manager
#auth_manager = AuthManager(user_credentials=user_credentials)
hashed_passwords = stauth.Hasher(passwords).generate()

authenticator = stauth.Authenticate(names,usernames,hashed_passwords,'some_cookie_name','some_signature_key')#, cookie_expiry_days=0)
name, authentication_status, username = authenticator.login('Login', 'main')

# Define the app with authentication
#app = AuthenticatedWebApp(
    #auth_manager=authenticator,
    #title='Time Series Forecasting App'
#)

# Define the streamlit page
def app():

    # Authenticate the user
    if authentication_status:
        st.subheader('Welcome *%s*' % (name))
    elif authentication_status == False:
        st.error('Username/password is incorrect')
        return
    elif authentication_status == None:
        st.warning('Please enter your username and password')
        return

    # Create the page with dropdowns for selecting the data frame and forecast period
    st.title('Time Series Forecasting App')
    df_name = st.selectbox('Select a School:', [School_Of_Commerce, Business_School, Professional_Accounting])
    forecast_period = st.slider('Forecast Period:', min_value=1, max_value=365)

    # Read the selected data frame and preprocess it
    df = pd.read_csv(df_name)
    df['Day'] = pd.to_datetime(df['Day'])
    df['Impressions'] = df['Impressions'].astype(int)
    df['Clicks'] = df['Clicks'].astype(int)
    df = df[['Day', 'Clicks']]
    df = df.rename(columns={'Day': 'ds', 'Clicks': 'y'})

    # Implement the Prophet model for forecasting
    model = Prophet()
    model.fit(df)
    future = model.make_future_dataframe(periods=forecast_period)
    forecast = model.predict(future)
    forecast =forecast[['ds', 'yhat']]
    forecast = forecast.rename(columns={'ds': 'Date', 'yhat': 'Clicks'})
    forecast = forecast.reset_index(drop=True)
    
    # Implement the ARIMA model for forecasting
    arima_model = ARIMA(df['y'], order=(1, 0, 1))
    arima_fit = arima_model.fit()
    arima_forecast = arima_fit.forecast(steps=forecast_period)

    # Display the forecasts generated by both models
    tab1, tab2 = st.tabs(["Prophet", "ARIMA"])
    with tab1:
        st.header("Prophet")
        st.write('Prophet Forecast:')
        st.write(forecast.tail(forecast_period).sum())
    with tab2:
        st.header("ARIMA")
        st.write('ARIMA Forecast:')
        st.write('Number of Clicks is %s' % (round(arima_forecast.sum())))

# Run the app
if __name__ == '__main__':
    app()